import ipywidgets as widgets
from IPython.display import display, clear_output
import time

# Checkboxes with tighter layout
gbi_chk = widgets.Checkbox(value=False, description='GBI', layout=widgets.Layout(width='80px'))
sef_chk = widgets.Checkbox(value=False, description='SEF', layout=widgets.Layout(width='80px'))
wbf_chk = widgets.Checkbox(value=False, description='WBF', layout=widgets.Layout(width='80px'))
wmf_chk = widgets.Checkbox(value=False, description='WMF', layout=widgets.Layout(width='80px'))
ucits_chk = widgets.Checkbox(value=False, description='UCITS', layout=widgets.Layout(width='80px'))

# Button styled in grey (secondary)
generate_btn = widgets.Button(description="Generate", button_style='secondary')  # grey button
loading_label = widgets.Label(value="")
output = widgets.Output()

def on_generate_clicked(b):
    with output:
        clear_output()
        selected = []
        if gbi_chk.value: selected.append('GBI')
        if sef_chk.value: selected.append('SEF')
        if wbf_chk.value: selected.append('WBF')
        if wmf_chk.value: selected.append('WMF')
        if ucits_chk.value: selected.append('UCITS')

        if not selected:
            print("‚ö†Ô∏è Please select at least one dashboard.")
            return

        generate_btn.disabled = True
        loading_label.value = "‚è≥ Loading..."

        time.sleep(0.2)
        tab_contents = []

        if 'GBI' in selected:
            tab_contents.append((
                'GBI Fund',
                W.create_dashboard(
                    obj.GBI_Fund, obj.GBI_Equity_Totals, obj.GBI_Rules, obj.GBI_NAV,
                    obj.GBI_Sector, obj.GBI_SUM_Cash, obj.GBI_Time, obj.GBI_Index, obj.GBI_Returns, 0)
            ))

        if 'SEF' in selected:
            tab_contents.append((
                'SEF Fund',
                W.create_dashboard(
                    obj.SEN_Fund, obj.SEN_Equity_Totals, obj.SEN_Rules, obj.SEN_NAV,
                    obj.SEN_Sector, obj.SEN_SUM_Cash, obj.SEN_Time, obj.SEN_Index, obj.SEN_Returns, 0)
            ))

        if 'WBF' in selected:
            tab_contents.append((
                'WBF Fund',
                W.create_dashboard(
                    obj.WBF_Fund, obj.WBF_Equity_Totals, obj.WBF_Rules, obj.WBF_NAV,
                    obj.WBF_Sector, obj.WBF_SUM_Cash, obj.WBF_Time, obj.WBF_Index, obj.WBF_Situs, 0)
            ))

        if 'WMF' in selected:
            tab_contents.append((
                'WMF Fund',
                W.create_dashboard(
                    obj.WMF_Fund, obj.WMF_Equity_Totals, obj.WMF_Rules, obj.WMF_NAV,
                    obj.WMF_Sector, obj.WMF_SUM_Cash, obj.WMF_Time, obj.WMF_Index, obj.WMF_Situs, 0)
            ))

        if 'UCITS' in selected:
            tab_contents.append(('UCITS', W.create_test_page(S.style.text)))

        tabs = widgets.Tab()
        tabs.children = [tab for (_, tab) in tab_contents]
        for i, (name, _) in enumerate(tab_contents):
            tabs.set_title(i, name)

        display(tabs)
        loading_label.value = ""
        generate_btn.disabled = False

generate_btn.on_click(on_generate_clicked)

# Align checkboxes horizontally with no gap
checkboxes = widgets.HBox(
    [gbi_chk, sef_chk, wbf_chk, wmf_chk, ucits_chk],
    layout=widgets.Layout(gap='0px')
)

ui = widgets.VBox([checkboxes, generate_btn, loading_label, output])
display(ui)




        display(tabs)
        loading_label.value = ""
        generate_btn.disabled = False

        # ‚è±Ô∏è Auto-refresh after WAIT_SECONDS
        WAIT_SECONDS = 1200

        def auto_refresh():
            time.sleep(WAIT_SECONDS)
            with output:
                clear_output()
                loading_label.value = "üîÅ Auto-refreshing dashboards..."
                generate_btn.disabled = True
                time.sleep(0.2)
                on_generate_clicked(None)  # re-run with same selections

        threading.Thread(target=auto_refresh).start()


